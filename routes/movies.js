const router = require('express').Router();
const Movies = require('../models/Movies');
const Review = require('../models/Review');

// Creating a movie
router.post('/', async (req, res) => {
  try{

  
    const movies = new Movies({
        title: req.body.title,
        genre:req.body.genre,
        year:req.body.year,
        director:req.body.director
    });
    const savedMovies = await movies.save();
    res.json(savedMovies);
} catch(error)  {
        res.json({message:error})
    };


  // getting the movie info with id from database system
router.get('/:id',async(req, res) => {
    try{
        const movies = await Movies.findById(req.params.id);
        res.json(movies);
    }catch(error){
        res.json({message:error})
    }
} )


// We need to update the movie information
router.patch('/:id', async(req, res) => {
    try{
        const movies = await Movies.updateOne(
            // id is generated by MONGO and we passing through req.params.id
            { _id: req.params.id},
            { $set: {
                title: req.body.title,
                genre:req.body.genre,
                year:req.body.year,
                director:req.body.director
            }

       }

  );
  const updatedMovie = await movies.save();
  res.json(updatedMovie);

    }catch(error){
        res.json({message:error});
    }
});

//  Creating a review for the given movie id
router.post('/:id/reviews', async(req, res) => {
    try{
        const review = await Review({
            user_id: req.body.user_id,
            movie_id: req.params.id,
            // upvote:req.body.upvote,
            content:req.body.content
            // downvote:req.body.downvote,
            // votes:req.body.votes
        });
        const savedReview = await review.save();
        res.json(savedReview);

    }catch(error){
        res.json({message:error});
    }
})

// get all the revies of the 'id' movie

router.get('/:id/reviews', async(req,res) =>{

    try{
        const reviews = await Review
        .find({"movie_id": req.params.id})
        .populate("movie_id")
        .populate("user_id");
       
        res.json(reviews);

    }catch(error){
        res.json({message:error});
    }
});

});

//  Getting the specific review 
router.get('/:id/reviews/:reviewId', async(req, res) => {
    try{
        const review = await Review
        .find({"movie_id":req.params.id, "_id": req.params.id})
        .populate("movie_id")
        .populate("_id");


        res.json(review);

    }catch(error){
        res.json({message:error})
    }
});


// delete the specific review
router.delete("/:id/reviews/:reviewId", async(req, res) => {
    try{
        const review = await Review.remove({"movie_id":req.params.id, "_id":req.params.id});
        res.json(review);

    }catch(error){
        res.json({message:error});
    }
});


// Creating a vote (up/down)




module.exports = router;